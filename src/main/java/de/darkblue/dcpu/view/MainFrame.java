/*
 * Copyright (C) 2012 Florian Frankenberger
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.darkblue.dcpu.view;

import de.darkblue.dcpu.interpreter.DCPU;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.fife.ui.autocomplete.AutoCompletion;
import org.fife.ui.rsyntaxtextarea.RSyntaxDocument;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.Theme;
import org.fife.ui.rtextarea.RTextScrollPane;

/**
 *
 * @author Florian Frankenberger
 */
public class MainFrame extends javax.swing.JFrame {

    private RSyntaxTextArea codeArea;
    private final DCPU dcpu;
    
    private final MemoryFrame memoryFrame;
    private final RegistersFrame registersFrame;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame(DCPU dcpu) {
        this.dcpu = dcpu;
        
        initComponents();
        initCodeArea();
        initRamArea();
        
        this.setLocationRelativeTo(null);
        final Point location = this.getLocation();
        
        this.memoryFrame = new MemoryFrame(this, dcpu);
        this.memoryFrame.setLocation(location.x + (this.getWidth() * 4) / 5, 
                location.y + this.getHeight() / 2);
        this.memoryFrame.setVisible(true);
        
        final Point memoryFrameLocation = this.memoryFrame.getLocation();
        this.registersFrame = new RegistersFrame(this, dcpu);
        this.registersFrame.setLocation(memoryFrameLocation.x + memoryFrame.getWidth() - registersFrame.getWidth(), 
                location.y + this.getHeight() / 2 - this.registersFrame.getHeight());
        this.registersFrame.setVisible(true);
    }
    
    private void initRamArea() {
//        ramEditor = new HexEditor();
//        this.jSplitPane2.setRightComponent(ramEditor);
    }
    
    private void initCodeArea() {
        this.codeArea = new RSyntaxTextArea(new RSyntaxDocument(new DasmTokenMakerFactory(), "dasm"));
//        this.codeArea.setPreferredSize(new Dimension(500, 500));
        
        this.codeArea.setCodeFoldingEnabled(true);
        this.codeArea.setAntiAliasingEnabled(true);
        this.codeArea.setBracketMatchingEnabled(true);
        this.codeArea.setAnimateBracketMatching(false);
        
        try {
            Theme theme = Theme.load(this.getClass().getResourceAsStream("/defaultTheme.xml"));
            theme.apply(codeArea);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        RTextScrollPane sp = new RTextScrollPane(codeArea);
        sp.setLineNumbersEnabled(true);
        
        AutoCompletion autoCompletion = new AutoCompletion(new DasmAutocompleteProvider());
        autoCompletion.install(codeArea);
        
        getContentPane().add(sp, java.awt.BorderLayout.CENTER);        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(300, 200));
        setPreferredSize(new java.awt.Dimension(1024, 600));

        jToolBar1.setRollover(true);

        jButton1.setText("jButton1");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton1);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
