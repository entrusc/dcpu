/*
 * Copyright (C) 2012 Florian Frankenberger
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.darkblue.dcpu.view;

import de.darkblue.dcpu.interpreter.DCPU;
import de.darkblue.dcpu.parser.instructions.Word;
import java.awt.Color;
import java.awt.Component;
import java.awt.SystemColor;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author Florian Frankenberger
 */
public class MemoryFrame extends javax.swing.JDialog {

    /**
     * Creates new form MemoryFrame
     */
    public MemoryFrame(java.awt.Frame parent, final DCPU dcpu) {
        super(parent, false);
        initComponents();
        this.ramTable.setModel(new DCPUMemoryTableModel(dcpu));
        
        //disallow selection of column 0
        this.ramTable.getColumnModel().setSelectionModel(new DefaultListSelectionModel() {

            @Override
            public void setSelectionInterval(int index0, int index1) {
                if (index0 < 1 || index1 < 1) {
                    return;
                }
                super.setSelectionInterval(index0, index1);
            }

        });
        
        //update the cell information panel
        ListSelectionListener listSelectionListener = new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
               int col = ramTable.convertColumnIndexToModel(ramTable.getSelectedColumn()) - 1;
               int row = ramTable.convertRowIndexToModel(ramTable.getSelectedRow());
               final Word position = new Word();
               position.setUnsignedInt(row * (ramTable.getModel().getColumnCount() - 1) + col);
               memoryCellInformationPanel1.setMemoryCell("0x" + position.toHexString(), dcpu.getRam(position));
            }
        };
        this.ramTable.getSelectionModel().addListSelectionListener(listSelectionListener);
        this.ramTable.getColumnModel().getSelectionModel().addListSelectionListener(listSelectionListener);
        
        //change selected and first cell design
        this.ramTable.setDefaultRenderer(Word.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
               int selectedCol = ramTable.convertColumnIndexToModel(ramTable.getSelectedColumn());
               int selectedRow = ramTable.convertRowIndexToModel(ramTable.getSelectedRow());
                if (isSelected || hasFocus || (selectedCol == column && selectedRow == row)) {
                    c.setBackground(new Color(107, 129, 137));
                    c.setForeground(new Color(255, 255, 255));
                } else {
                    if (column == 0) {
                        c.setBackground(SystemColor.control);
                        c.setForeground(SystemColor.controlText);
                    } else {
                        final Color basicColor = table.getBackground();
                        final Color rowColor = row % 2 == 0 ? basicColor : basicColor.brighter();
                        final Color colColor = column % 2 == 0 ? basicColor : SwingUtils.shiftHue(basicColor);
                        c.setBackground(SwingUtils.mix(rowColor, colColor));
                        c.setForeground(table.getForeground());
                    }
                }
                return c;
            }            
        });
        
        ramTable.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        ramTable.getSelectionModel().setSelectionInterval(0, 0);
        ramTable.getColumnModel().getSelectionModel().setSelectionInterval(1, 1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ramTable = new javax.swing.JTable();
        memoryCellInformationPanel1 = new de.darkblue.dcpu.view.MemoryCellInformationPanel();

        setTitle("DCPU Memory");

        ramTable.setBackground(new java.awt.Color(41, 49, 51));
        ramTable.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        ramTable.setForeground(new java.awt.Color(193, 203, 194));
        ramTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        ramTable.setToolTipText("");
        ramTable.setDoubleBuffered(true);
        ramTable.setRowSelectionAllowed(false);
        ramTable.setSelectionBackground(new java.awt.Color(107, 129, 137));
        ramTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(ramTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 811, Short.MAX_VALUE)
            .addComponent(memoryCellInformationPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(memoryCellInformationPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private de.darkblue.dcpu.view.MemoryCellInformationPanel memoryCellInformationPanel1;
    private javax.swing.JTable ramTable;
    // End of variables declaration//GEN-END:variables
}
